import os
import flask
import re
import json
from flask import g
from flask_slack import Slack
from slackclient import SlackClient
from slackperson import SlackPerson


app = flask.Flask(__name__)
app.config.from_object(__name__)

slackin = Slack(app)
app.config['SLACK_VER_TOKEN'] = os.environ['SLACK_VER_TOKEN']
app.config['TEAM_ID'] = os.environ['TEAM_ID']
slackout = SlackClient(os.environ['SLACK_API_TOKEN'])


def setup(my_app):
    my_app.config['SLACK_VER_TOKEN'] = os.environ['SLACK_VER_TOKEN']
    my_app.config['TEAM_ID'] = os.environ['TEAM_ID']

# NOTE: THIS CODE IS SUPER UNSAFE. CLEAN IT UP BEFORE PROCEEDING.


@slackin.command('echo', token=app.config['SLACK_VER_TOKEN'],
                 team_id=app.config['TEAM_ID'], methods=['POST'])
def echo_back(**kwargs):
    print(kwargs)
    text = kwargs.get('text')
    # returns an array of SlackPerson objects
    all_users = slackout.api_call('users.list')
    people = findpeople(text, all_users)
    if people == []:
        raise exceptions.NoMentionsError(
            "No one was mentioned in the message")

    # algorithm for replacing plain text @mentions with real ones
    print(people)
    echo_text = text
    clean_text = text
    for person in people:
        echo_text = echo_text.replace('@' + person.username,
                                      '<@{}> {}'.format(person.userid,
                                                        person.email))
        clean_text = clean_text.replace('@' + person.username, '')

    print(slackout.api_call("chat.postMessage",
                            text=' '.join((echo_text, 'CLEANED:', clean_text)),
                            channel=kwargs.get('channel_id'),
                            reply_broadcast=True,
                            as_user=True,
                            ))
    return slackin.response('Your message was sent', response_type='ephemeral')


def findpeople(text, userlist):
    """Finds username mentions in slack text and creates SlackPerson objects
    for those people. Returns a list of those SlackPerson objects.

    Arguments:
    text: text to find @ mentions in.
    userlist: output of slack api users.list

    Returns: List of SlackPerson objects or empty list.
    """
    usernames = re.findall('@([a-zA-Z0-9-._]*)', text)
    person_list = [SlackPerson(user, userlist) for user in usernames]
    newtext = text
    for person in person_list:
        newtext = newtext.replace('@' + person.username,
                                  '<@{}>'.format(person.userid))
    return person_list


def mention_text(text, people=None, userlist=None):
    """Replaces username mentions in text with user id mentions for tagging by
    slack api message sending.

    Arguments:
    text: The text containing @ mentions
    people: A list of SlackPerson objects for people found in the text. If not
    specified, one will be generated by passing text and userlist to
    findpeople. Required if userlist is not provided.
    userlist: The json from slack api users.list. Required if people is not
    provided.
    """
    if people is None:
        if userlist is None:
            raise SyntaxError("Either people or userlist is required.")
        people = findpeople(text, userlist)
    for person in people:
        text = text.replace('@' + person.username,
                            '<@{}>'.format(person.userid, person.email))

    return text


app.add_url_rule('/', view_func=slackin.dispatch)
# if __name__ == '__main__':
#     app.run()
